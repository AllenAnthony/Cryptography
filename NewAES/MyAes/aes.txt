
下载myaes.rar(http://10.71.45.100/bhh/myaes.rar), 解压缩, 里面包含了vc6的工程
文件MyAes.dsw, 双击打开, 可以看到MyAes.c; 
MyAes.c中部分函数的源代码已删除, 这些函数经编译后生成的机器码已转移到aes.lib内。
这些已删除的函数包括:
void aes_polynomial_mul(unsigned char x[4], unsigned char y[4], unsigned char z[4]);
void ByteSubInverse(unsigned char *p, int n);
void ShiftRowInverse(unsigned char *p);
void MixColumnInverse(unsigned char *p, unsigned char a[4], int do_mul);
void aes_decrypt(unsigned char *bufin, unsigned char *bufout, unsigned char *key);
请对本程序(MyAes.c)做以下修改:
(1) 重写上述函数
(2) 删除#pragma comment(lib, "aes.lib")
要求:
(1) 除sbox外, 函数中不可以查其它表来代替计算
(2) 修改后的程序必须能正常编译运行
(3) 运行产生的输出结果与本程序一致


把MyAes文件夹重命名为"学号姓名", 用WinRar压缩成"学号姓名.rar",
上传到以下ftp:
ftp://bhhcrypt:bhhcrypt@10.71.45.100/作业03


===================================================================================
以下为上述函数的功能说明:
void aes_polynomial_mul(unsigned char x[4], unsigned char y[4], unsigned char z[4])
{
   /* 有限域GF(2^8)多项式乘法,
                          4
      计算z = x * y mod (X  + 1);
    */
   /*     4
         X    +  1
      n =1 0 0 0 1
    */
   /*                 3    2
      被乘数为多项式3X  + X  + X + 2时, 转化成矩阵为:
      2 3 1 1
      1 2 3 1
      1 1 2 3
      3 1 1 2
                         3         2
      被乘数为多项式0xB*X  + 0x0D*X  + 0x09*X + 0x0E时, 转化成矩阵为:
      E B D 9
      9 E B D
      D 9 E B
      B D 9 E
   */
}

void ByteSubInverse(unsigned char *p, int n)
{
   /* 把p所指向的n字节替换成sbox反查表中的值 */
}


void ShiftRowInverse(unsigned char *p)
{
   /* 对p所指向的4*4矩阵做逐行循环右移操作:
      第0行: 不移动;
      第1行: 右移1字节
      第2行: 右移2字节
      第3行: 右移3字节
    */
}


void MixColumnInverse(unsigned char *p, unsigned char a[4], int do_mul)
{
   /* (1) 对p指向的4*4矩阵m中的4行做乘法运算;
      (2) 这里的乘法是指有限域GF(2^8)多项式模(X^4+1)乘法,具体步骤请参考教材p.61及p.62;
      (3) aes解密时采用的被乘数a为加密所用多项式的逆, 即{0x0B, 0x0D, 0x09, 0x0E};
      (4) 矩阵m中的4行与a做乘法运算后, 按以下顺序转成矩阵t中的列:
          第0列:
            t[0][0] = m[0][0]
            t[1][0] = m[0][1]
            t[2][0] = m[0][2]
            t[3][0] = m[0][3]
          第3列:
            t[1][3] = m[1][0]
            t[2][3] = m[1][1]
            t[3][3] = m[1][2]
            t[0][3] = m[1][3]
          第2列:
            t[2][2] = m[2][0]
            t[3][2] = m[2][1]
            t[0][2] = m[2][2]
            t[1][2] = m[2][3]
          第1列:
            t[3][1] = m[3][0]
            t[0][1] = m[3][1]
            t[1][1] = m[3][2]
            t[2][1] = m[3][3]
      (5) 复制t到p中, 替换掉p中原有的矩阵;
      (6) do_mul用来控制是否要做乘法运算, 加密最后一轮及解密第一轮do_mul=0;
    */
}

void aes_decrypt(unsigned char *bufin, unsigned char *bufout, unsigned char *key)
{
   /* 使用key对bufin中包含的16字节密文进行解密, 产生16字节明文存放到bufout */
   /* 具体步骤请参考以下函数:
      void aes_encrypt(unsigned char *bufin, unsigned char *bufout, unsigned char *key);
      但要注意解密步骤的顺序与加密步骤是相反的。
    */
}


