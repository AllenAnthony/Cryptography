void aes_polynomial_mul(unsigned char x[4], unsigned char y[4], unsigned char z[4])//aes_8bit_mul_mod_0x11B(unsigned int x, unsigned int y)
{
	int cou;
	unsigned char T[4];
	for (cou = 0; cou < 4; cou++)
	{
		T[cou] = (aes_8bit_mul_mod_0x11B(y[0], x[(3 - cou) % 4]) ^ aes_8bit_mul_mod_0x11B(y[1], x[(4 - cou) % 4]) ^ aes_8bit_mul_mod_0x11B(y[2], x[(5 - cou) % 4]) ^ aes_8bit_mul_mod_0x11B(y[3], x[(6 - cou) % 4]) );
	}
	memcpy(z, T, 4 );
}

void ByteSubInverse(unsigned char *p, int n)
{
	/* 把p所指向的n字节替换成sbox中的值 */
	int i;
	for (i = 0; i<n; i++)
	{
		p[i] = sbox_inverse[p[i]];
	}
}

void ShiftRowInverse(unsigned char *p)
{
	/* 对p所指向的4*4矩阵做逐行循环右移操作:
	第0行: 不移动;
	第1行: 右移1字节
	第2行: 右移2字节
	第3行: 右移3字节
	*/

	int i;
	for (i = 1; i<4; i++)
	{
		ror_a_row(p + i * 4, i);
	}
}

void MixColumnInverse(unsigned char *p, unsigned char a[4], int do_mul)
{
	int  j;
	unsigned char T[4][4];
	unsigned char R[16];
	if (do_mul)
	{
		for (j = 0; j<4; j++)
		{
			aes_polynomial_mul(a, p + j * 4, R + j * 4); 
		}
		memcpy(p, R, 4 * 4);
	}
	
	T[0][0] = *(p + 0 * 4 + 0);
	T[1][0] = *(p + 0 * 4 + 1);
	T[2][0] = *(p + 0 * 4 + 2);
	T[3][0] = *(p + 0 * 4 + 3);

	T[1][3] = *(p + 1 * 4 + 0);
	T[2][3] = *(p + 1 * 4 + 1);
	T[3][3] = *(p + 1 * 4 + 2);
	T[0][3] = *(p + 1 * 4 + 3);

	T[2][2] = *(p + 2 * 4 + 0);
	T[3][2] = *(p + 2 * 4 + 1);
	T[0][2] = *(p + 2 * 4 + 2);
	T[1][2] = *(p + 2 * 4 + 3);

	T[3][1] = *(p + 3 * 4 + 0);
	T[0][1] = *(p + 3 * 4 + 1);
	T[1][1] = *(p + 3 * 4 + 2);
	T[2][1] = *(p + 3 * 4 + 3);

	memcpy(p, T, 4 * 4);
}

void aes_decrypt(unsigned char *bufin, unsigned char *bufout, unsigned char *key)
{
	/* 使用key对bufin中包含的16字节密文进行解密, 产生16字节明文存放到bufout */
	int i;
	unsigned char a[4] = { 0x0B, 0x0D, 0x09, 0x0E };
	unsigned char matrix[4][4];
	memcpy(matrix, bufin, 4 * 4); /* 复制明文16字节到matrix */
	//printf("--------------------decrypt--------------------\n");
	//PRI(matrix);
	for (i = key_rounds; i >= 1; i--)
	{  /* 第1至key_rounds轮, 做以下步骤: ByteSub, ShiftRow, MixColumn, AddRoundKey */

		AddRoundKey((unsigned char *)matrix, key + i*(4 * 4));
		//PRI(matrix);

		if (i != key_rounds)
			MixColumnInverse((unsigned char *)matrix, a, 1); /* do mul */
		else
			MixColumnInverse((unsigned char *)matrix, a, 0); /* don't mul */
		//PRI(matrix);
		ShiftRowInverse((unsigned char *)matrix);
		//PRI(matrix);
		ByteSubInverse((unsigned char *)matrix, 16);
		//PRI(matrix);
		//printf("one round\n");
	}

	AddRoundKey((unsigned char *)matrix, key); /* 第0轮只做AddRoundKey() */
	//PRI(matrix);
	memcpy(bufout, matrix, 4 * 4); /* 密文复制到bufout */
}